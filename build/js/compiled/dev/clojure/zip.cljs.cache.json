["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$remove","~$replace","~$next"]],"~:name","~$clojure.zip","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$rightmost",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","~:line",142,"~:column",7,"~:end-line",142,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^H",[["~$loc"]]]]],"~:doc","Returns the loc of the rightmost sibling of the node at this loc, or self"],"^8","~$clojure.zip/rightmost","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",16,"~:method-params",["^H",[["^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^D",1,"~:variadic?",false,"^C",142,"~:ret-tag",["^4",[null,"~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^E",142,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the rightmost sibling of the node at this loc, or self"],"~$insert-child",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",194,"^D",7,"^E",194,"^F",19,"^G",["^H",["^I",["^H",[["^J","~$item"]]]]],"^K","Inserts the item as the leftmost child of the node at this loc,\n  without moving"],"^8","~$clojure.zip/insert-child","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",19,"^M",["^H",[["^J","^X"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",194,"^Q",["^4",["^R","^S","^T"]],"^E",194,"^U",2,"^V",true,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the leftmost child of the node at this loc,\n  without moving"],"~$left",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",150,"^D",7,"^E",150,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the left sibling of the node at this loc, or nil"],"^8","~$clojure.zip/left","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",150,"^Q",["^4",["^R","^S","^T"]],"^E",150,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the left sibling of the node at this loc, or nil"],"~$path",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",82,"^D",7,"^E",82,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of nodes leading to this loc"],"^8","~$clojure.zip/path","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",82,"^Q","~$any","^E",82,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of nodes leading to this loc"],"~$leftmost",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",157,"^D",7,"^E",157,"^F",15,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the leftmost sibling of the node at this loc, or self"],"^8","~$clojure.zip/leftmost","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",15,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",157,"^Q",["^4",[null,"^R","^S","^T"]],"^E",157,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the leftmost sibling of the node at this loc, or self"],"~$append-child",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",200,"^D",7,"^E",200,"^F",19,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the rightmost child of the node at this loc,\n  without moving"],"^8","~$clojure.zip/append-child","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",19,"^M",["^H",[["^J","^X"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",200,"^Q",["^4",["^R","^S","^T"]],"^E",200,"^U",2,"^V",true,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the rightmost child of the node at this loc,\n  without moving"],"~$branch?",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",64,"^D",7,"^E",64,"^F",14,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns true if the node at loc is a branch"],"^8","~$clojure.zip/branch?","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",14,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",64,"^Q","^12","^E",64,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns true if the node at loc is a branch"],"~$children",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",69,"^D",7,"^E",69,"^F",15,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of the children of node at loc, which must be a branch"],"^8","~$clojure.zip/children","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",15,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",69,"^Q","^12","^E",69,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of the children of node at loc, which must be a branch"],"^5",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",237,"^D",7,"^E",237,"^F",13,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],"^8","~$clojure.zip/remove","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",13,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",237,"^Q",["^4",[null,"^R","^S","^T"]],"^E",237,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],"~$down",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",98,"^D",7,"^E",98,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],"^8","~$clojure.zip/down","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",98,"^Q",["^4",["^R","^S","^T"]],"^E",98,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],"^6",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",183,"^D",7,"^E",183,"^F",14,"^G",["^H",["^I",["^H",[["^J","~$node"]]]]],"^K","Replaces the node at this loc, without moving"],"^8","~$clojure.zip/replace","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",14,"^M",["^H",[["^J","^1>"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",183,"^Q",["^4",["^R","^S","^T"]],"^E",183,"^U",2,"^V",true,"^G",["^H",["^I",["^H",[["^J","^1>"]]]]],"^K","Replaces the node at this loc, without moving"],"~$zipper",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",18,"^D",7,"^E",18,"^F",13,"^G",["^H",["^I",["^H",[["^17","^19","~$make-node","~$root"]]]]],"^K","Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"^8","~$clojure.zip/zipper","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",13,"^M",["^H",[["^17","^19","^1A","^1B"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",18,"^E",18,"^U",4,"^V",true,"^G",["^H",["^I",["^H",[["^17","^19","^1A","^1B"]]]]],"^K","Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"~$end?",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",232,"^D",7,"^E",232,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns true if loc represents the end of a depth-first walk"],"^8","~$clojure.zip/end?","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",232,"^Q","~$boolean","^E",232,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns true if loc represents the end of a depth-first walk"],"~$edit",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",189,"^D",7,"^E",189,"^F",11,"^G",["^H",["^I",["^H",[["^J","~$f","~$&","~$args"]]]]],"^K","Replaces the node at this loc with the value of (f node args)","~:top-fn",["^ ","^P",true,"~:fixed-arity",2,"^U",2,"^M",[["^H",["^J","~$f","^1H"]]],"^G",["^H",[["^J","~$f","~$&","^1H"]]],"^O",["^H",[null]]]],"^8","~$clojure.zip/edit","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^1I",["^ ","^P",true,"^1J",2,"^U",2,"^M",[["^H",["^J","~$f","^1H"]]],"^G",["^H",[["^J","~$f","~$&","^1H"]]],"^O",["^H",[null]]],"^M",[["^H",["^J","~$f","^1H"]]],"^N",null,"^1J",2,"^O",["^H",[null]],"^D",1,"^P",true,"~:methods",[["^ ","^1J",2,"^P",true,"~:tag",["^4",["^R","^S","^T"]]]],"^C",189,"^Q","^12","^E",189,"^U",2,"^V",true,"^G",["^H",[["^J","~$f","~$&","^1H"]]],"^K","Replaces the node at this loc with the value of (f node args)"],"^1A",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",76,"^D",7,"^E",76,"^F",16,"^G",["^H",["^I",["^H",[["^J","^1>","^19"]]]]],"^K","Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],"^8","~$clojure.zip/make-node","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",16,"^M",["^H",[["^J","^1>","^19"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",76,"^Q","^12","^E",76,"^U",3,"^V",true,"^G",["^H",["^I",["^H",[["^J","^1>","^19"]]]]],"^K","Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],"~$vector-zip",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",42,"^D",7,"^E",42,"^F",17,"^G",["^H",["^I",["^H",[["^1B"]]]]],"^K","Returns a zipper for nested vectors, given a root vector"],"^8","~$clojure.zip/vector-zip","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",17,"^M",["^H",[["^1B"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",42,"^Q","^12","^E",42,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^1B"]]]]],"^K","Returns a zipper for nested vectors, given a root vector"],"^1>",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",60,"^D",7,"^E",60,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the node at loc"],"^8","~$clojure.zip/node","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",60,"^Q","^12","^E",60,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the node at loc"],"~$up",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",111,"^D",7,"^E",111,"^F",9,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],"^8","~$clojure.zip/up","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",9,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",111,"^Q",["^4",["^R","^S","^T"]],"^E",111,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],"~$insert-right",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",174,"^D",7,"^E",174,"^F",19,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the right sibling of the node at this loc,\n  without moving"],"^8","~$clojure.zip/insert-right","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",19,"^M",["^H",[["^J","^X"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",174,"^Q",["^4",["^R","^S","^T"]],"^E",174,"^U",2,"^V",true,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the right sibling of the node at this loc,\n  without moving"],"~$rights",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",92,"^D",7,"^E",92,"^F",13,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of the right siblings of this loc"],"^8","~$clojure.zip/rights","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",13,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",92,"^Q","^12","^E",92,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of the right siblings of this loc"],"^1B",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",124,"^D",7,"^E",124,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","zips all the way up and returns the root node, reflecting any\n changes."],"^8","~$clojure.zip/root","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",124,"^Q","^12","^E",124,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","zips all the way up and returns the root node, reflecting any\n changes."],"^7",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",206,"^D",7,"^E",206,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"^8","~$clojure.zip/next","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",206,"^Q",["^4",[null,"^R","~$cljs.core/IVector","^12","^S"]],"^E",206,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"~$seq-zip",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",34,"^D",7,"^E",34,"^F",14,"^G",["^H",["^I",["^H",[["^1B"]]]]],"^K","Returns a zipper for nested sequences, given a root sequence"],"^8","~$clojure.zip/seq-zip","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",14,"^M",["^H",[["^1B"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",34,"^Q","^12","^E",34,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^1B"]]]]],"^K","Returns a zipper for nested sequences, given a root sequence"],"~$insert-left",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",165,"^D",7,"^E",165,"^F",18,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the left sibling of the node at this loc,\n without moving"],"^8","~$clojure.zip/insert-left","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",18,"^M",["^H",[["^J","^X"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",165,"^Q",["^4",["^R","^S","^T"]],"^E",165,"^U",2,"^V",true,"^G",["^H",["^I",["^H",[["^J","^X"]]]]],"^K","Inserts the item as the left sibling of the node at this loc,\n without moving"],"~$prev",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",221,"^D",7,"^E",221,"^F",11,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],"^8","~$clojure.zip/prev","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",11,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",221,"^Q",["^4",[null,"^R","^S","^T"]],"^E",221,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],"~$right",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",135,"^D",7,"^E",135,"^F",12,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the right sibling of the node at this loc, or nil"],"^8","~$clojure.zip/right","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",12,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",135,"^Q",["^4",["^R","^S","^T"]],"^E",135,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns the loc of the right sibling of the node at this loc, or nil"],"~$lefts",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",87,"^D",7,"^E",87,"^F",12,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of the left siblings of this loc"],"^8","~$clojure.zip/lefts","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",12,"^M",["^H",[["^J"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",87,"^Q","~$seq","^E",87,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^K","Returns a seq of the left siblings of this loc"],"~$xml-zip",["^ ","^@",null,"^A",["^ ","^B","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/clojure/zip.cljs","^C",50,"^D",7,"^E",50,"^F",14,"^G",["^H",["^I",["^H",[["^1B"]]]]],"^K","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],"^8","~$clojure.zip/xml-zip","^B","resources/public/js/compiled/dev/clojure/zip.cljs","^F",14,"^M",["^H",[["^1B"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^P",false,"^C",50,"^Q","^12","^E",50,"^U",1,"^V",true,"^G",["^H",["^I",["^H",[["^1B"]]]]],"^K","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:ppath","~:zip/branch?","~:r","~:zip/children","~:content","~:l","~:zip/make-node","~:pnodes","~:changed?","~:end"]],"~:order",["^2A","^2B","^2D","^2C","^2E","~:l","~:r","^2@","^2F","^2G"]],"^K","Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet"]