["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$console","~$re-frame.loggers"],"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^=","~$data","~$clojure.data","~$re-frame.trace","^@","~$re-frame.settings","^A","~$interceptor","^=","~$trace","^@","~$re-frame.utils","^D","~$settings","^A","^4","^4","~$utils","^D","^<","^<","^?","^?","~$re-frame.db","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^3","^4","~$assoc-coeffect","^=","~$app-db","^G","~$update-coeffect","^=","~$get-effect","^=","~$->interceptor","^=","~$get-coeffect","^=","~$assoc-effect","^="],"~:defs",["^ ","~$unwrap",["^ ","^7","~$re-frame.std-interceptors/unwrap","~:file","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","~:line",40,"~:column",1,"~:end-line",40,"~:end-column",12,"~:meta",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",40,"^V",6,"^W",40,"^X",12],"~:tag","~$cljs.core/IMap"],"~$on-changes",["^ ","~:protocol-inline",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",223,"^V",8,"^W",223,"^X",18,"~:arglists",["~#list",["~$quote",["^13",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^13",["~$f","^15","^16"]]],"^12",["^13",[["~$f","^15","~$&","^16"]]],"~:arglists-meta",["^13",[null]]]],"^7","~$re-frame.std-interceptors/on-changes","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",18,"^17",["^ ","^18",true,"^19",2,"^1:",2,"^1;",[["^13",["~$f","^15","^16"]]],"^12",["^13",[["~$f","^15","~$&","^16"]]],"^1<",["^13",[null]]],"^1;",[["^13",["~$f","^15","^16"]]],"~:protocol-impl",null,"^19",2,"^1<",["^13",[null]],"^V",1,"^18",true,"~:methods",[["^ ","^19",2,"^18",true,"^Z","^["]],"^U",223,"~:ret-tag","~$any","^W",223,"^1:",2,"~:fn-var",true,"^12",["^13",[["~$f","^15","~$&","^16"]]]],"~$enrich",["^ ","^11",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",195,"^V",7,"^W",195,"^X",13,"^12",["^13",["^14",["^13",[["~$f"]]]]]],"^7","~$re-frame.std-interceptors/enrich","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",13,"^1;",["^13",[["~$f"]]],"^1>",null,"^1<",["^13",[null,null]],"^V",1,"^18",false,"^U",195,"^1@","^[","^W",195,"^1:",1,"^1B",true,"^12",["^13",["^14",["^13",[["~$f"]]]]]],"~$path",["^ ","^11",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",166,"^V",7,"^W",166,"^X",11,"^12",["^13",["^14",["^13",[["~$&","~$args"]]]]],"^17",["^ ","^18",true,"^19",0,"^1:",0,"^1;",[["^13",["^1F"]]],"^12",["^13",[["~$&","^1F"]]],"^1<",["^13",[null]]]],"^7","~$re-frame.std-interceptors/path","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",11,"^17",["^ ","^18",true,"^19",0,"^1:",0,"^1;",[["^13",["^1F"]]],"^12",["^13",[["~$&","^1F"]]],"^1<",["^13",[null]]],"^1;",[["^13",["^1F"]]],"^1>",null,"^19",0,"^1<",["^13",[null]],"^V",1,"^18",true,"^1?",[["^ ","^19",0,"^18",true,"^Z","^["]],"^U",166,"^1@","^1A","^W",166,"^1:",0,"^1B",true,"^12",["^13",[["~$&","^1F"]]]],"~$ctx-handler->interceptor",["^ ","^11",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",140,"^V",7,"^W",140,"^X",31,"^12",["^13",["^14",["^13",[["~$handler-fn"]]]]],"~:doc","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^7","~$re-frame.std-interceptors/ctx-handler->interceptor","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",31,"^1;",["^13",[["^1I"]]],"^1>",null,"^1<",["^13",[null,null]],"^V",1,"^18",false,"^U",140,"^1@","^[","^W",140,"^1:",1,"^1B",true,"^12",["^13",["^14",["^13",[["^1I"]]]]],"^1J","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^7","~$re-frame.std-interceptors/debug","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",15,"^V",1,"^W",15,"^X",11,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",15,"^V",6,"^W",15,"^X",11],"^Z","^["],"~$trim-v",["^ ","^7","~$re-frame.std-interceptors/trim-v","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",57,"^V",1,"^W",57,"^X",12,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",57,"^V",6,"^W",57,"^X",12],"^Z","^["],"~$after",["^ ","^11",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",210,"^V",7,"^W",210,"^X",12,"^12",["^13",["^14",["^13",[["~$f"]]]]]],"^7","~$re-frame.std-interceptors/after","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",12,"^1;",["^13",[["~$f"]]],"^1>",null,"^1<",["^13",[null,null]],"^V",1,"^18",false,"^U",210,"^1@","^[","^W",210,"^1:",1,"^1B",true,"^12",["^13",["^14",["^13",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^11",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",109,"^V",7,"^W",109,"^X",30,"^12",["^13",["^14",["^13",[["^1I"]]]]],"^1J","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^7","~$re-frame.std-interceptors/fx-handler->interceptor","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",30,"^1;",["^13",[["^1I"]]],"^1>",null,"^1<",["^13",[null,null]],"^V",1,"^18",false,"^U",109,"^1@","^[","^W",109,"^1:",1,"^1B",true,"^12",["^13",["^14",["^13",[["^1I"]]]]],"^1J","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^11",null,"^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",77,"^V",7,"^W",77,"^X",30,"^12",["^13",["^14",["^13",[["^1I"]]]]],"^1J","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^7","~$re-frame.std-interceptors/db-handler->interceptor","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",30,"^1;",["^13",[["^1I"]]],"^1>",null,"^1<",["^13",[null,null]],"^V",1,"^18",false,"^U",77,"^1@","^[","^W",77,"^1:",1,"^1B",true,"^12",["^13",["^14",["^13",[["^1I"]]]]],"^1J","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^Y",["^ ","^T","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^U",247,"^V",6,"^W",247,"^X",32],"^7","~$re-frame.std-interceptors/inject-global-interceptors","^T","resources/public/js/compiled/dev/re_frame/std_interceptors.cljc","^X",32,"^V",1,"^U",247,"^W",247,"^Z","^[","^1J","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^C","^@","^@","^@"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:path","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^2B","^2<","^2N","^2P","^2@","^2A","^24","^26","^23","^2K","^2I","^28","^22","^2=","^2?","^2O","^29","^2>","^2:","^2;","^2H","^21","^2C","^2F","^25","^2L","^2G","^2E","^20","^2M","^2J","^2D","^27"]],"^1J","contains re-frame supplied, standard interceptors"]