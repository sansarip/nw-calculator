["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$edamame.impl.syntax-quote","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$unquote-splicing?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",25,"~:private",true,"~:arglists",["~#list",["~$quote",["^H",[["~$form"]]]]]],"^F",true,"^5","~$edamame.impl.syntax-quote/unquote-splicing?","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",25,"~:method-params",["^H",[["^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^C",1,"~:variadic?",false,"^B",11,"~:ret-tag","~$boolean","^D",11,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["^J"]]]]]],"~$syntax-quote*",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",60,"^C",8,"^D",60,"^E",21,"^F",true,"^G",["^H",["^I",["^H",[[["^ ","~:keys",["~:gensyms"],"~:as","~$ctx"],"~$reader","^J"]]]]]],"^F",true,"^5","~$edamame.impl.syntax-quote/syntax-quote*","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",21,"^L",["^H",[["~$p__38372","^Y","^J"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",60,"^P",["^4",[null,"~$clj","~$any","~$cljs.core/List","~$clj-nil"]],"^D",60,"^R",3,"^S",true,"^G",["^H",["^I",["^H",[[["^ ","^U",["^V"],"^W","^X"],"^Y","^J"]]]]]],"~$flatten-map",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",49,"^C",8,"^D",49,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"~:doc","Flatten a map into a seq of alternate keys and values"],"^F",true,"^5","~$edamame.impl.syntax-quote/flatten-map","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",19,"^L",["^H",[["^J"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",49,"^P","~$seq","^D",49,"^R",1,"^S",true,"^G",["^H",["^I",["^H",[["^J"]]]]],"^15","Flatten a map into a seq of alternate keys and values"],"~$unquote?",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",7,"^C",7,"^D",7,"^E",15,"^G",["^H",["^I",["^H",[["^J"]]]]]],"^5","~$edamame.impl.syntax-quote/unquote?","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",15,"^L",["^H",[["^J"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",7,"^P","^Q","^D",7,"^R",1,"^S",true,"^G",["^H",["^I",["^H",[["^J"]]]]]],"~$syntax-quote-coll",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",31,"^C",8,"^D",31,"^E",25,"^F",true,"^G",["^H",["^I",["^H",[["^X","^Y","~$type","~$coll"]]]]]],"^F",true,"^5","~$edamame.impl.syntax-quote/syntax-quote-coll","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",25,"^L",["^H",[["^X","^Y","^1;","^1<"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",31,"^P","^12","^D",31,"^R",4,"^S",true,"^G",["^H",["^I",["^H",[["^X","^Y","^1;","^1<"]]]]]],"~$syntax-quote",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",117,"^C",7,"^D",117,"^E",19,"^G",["^H",["^I",["^H",[["^X","^Y","^J"]]]]]],"^5","~$edamame.impl.syntax-quote/syntax-quote","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",19,"^L",["^H",[["^X","^Y","^J"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",117,"^P",["^4",[null,"^12"]],"^D",117,"^R",3,"^S",true,"^G",["^H",["^I",["^H",[["^X","^Y","^J"]]]]]],"~$map-func",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",42,"^C",7,"^D",42,"^E",15,"^G",["^H",["^I",["^H",[["^1<"]]]]],"^15","Decide which map type to use, array-map if less than 16 elements"],"^5","~$edamame.impl.syntax-quote/map-func","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",15,"^L",["^H",[["^1<"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",42,"^P","~$cljs.core/Symbol","^D",42,"^R",1,"^S",true,"^G",["^H",["^I",["^H",[["^1<"]]]]],"^15","Decide which map type to use, array-map if less than 16 elements"],"~$add-meta",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",109,"^C",8,"^D",109,"^E",16,"^F",true,"^G",["^H",["^I",["^H",[["^X","^Y","^J","~$ret"]]]]]],"^F",true,"^5","~$edamame.impl.syntax-quote/add-meta","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",16,"^L",["^H",[["^X","^Y","^J","^1D"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",109,"^P",["^4",[null,"^12"]],"^D",109,"^R",4,"^S",true,"^G",["^H",["^I",["^H",[["^X","^Y","^J","^1D"]]]]]],"~$expand-list",["^ ","^?",null,"^@",["^ ","^A","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^B",17,"^C",8,"^D",17,"^E",19,"^F",true,"^G",["^H",["^I",["^H",[["^X","^Y","~$s"]]]]],"^15","Expand a list by resolving its syntax quotes and unquotes"],"^F",true,"^5","~$edamame.impl.syntax-quote/expand-list","^A","resources/public/js/compiled/dev/edamame/impl/syntax_quote.cljc","^E",19,"^L",["^H",[["^X","^Y","~$s"]]],"^M",null,"^N",["^H",[null,null]],"^C",1,"^O",false,"^B",17,"^P","^17","^D",17,"^R",3,"^S",true,"^G",["^H",["^I",["^H",[["^X","^Y","~$s"]]]]],"^15","Expand a list by resolving its syntax quotes and unquotes"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$clojure.core/list","~$clojure.core/vec","~:else","~:end-row-key","~:row-key","~$clojure.core/seq","~:col-key","~$clojure.core/sequence","~:resolve-symbol","~$cljs.core/with-meta","~$clojure.core/hash-set","~:syntax-quote","~$clojure.core/unquote-splicing","~$clojure.core/hash-map","~$clojure.core/apply","^V","~$clojure.core/unquote","~$clojure.core/array-map","~$clojure.core/concat","~:end-col-key","^I"]],"~:order",["^1[","^1X","^1L","^1N","^1S","^1Q","^21","^1Z","^1Y","^20","^V","^I","^1T","^1W","^1M","^1V","^1P","^1R","^1O","^22","^1U"]],"^15","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj"]