["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$edamame.core","~:imports",null,"~:requires",["^ ","~$p","~$edamame.impl.parser","^9","^9"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$parse-string",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/core.cljc","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^F",[["~$s"],["~$s","~$opts"]]]]],"~:doc","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  ","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$s"],["~$s","^H"]],"^E",["^F",[["~$s"],["~$s","^H"]]],"~:arglists-meta",["^F",[null,null]]]],"^5","~$edamame.core/parse-string","^@","resources/public/js/compiled/dev/edamame/core.cljc","^D",19,"^J",["^ ","^K",false,"^L",2,"^M",2,"^N",[["~$s"],["~$s","^H"]],"^E",["^F",[["~$s"],["~$s","^H"]]],"^O",["^F",[null,null]]],"^N",[["~$s"],["~$s","^H"]],"~:protocol-impl",null,"^L",2,"^O",["^F",[null,null]],"^B",1,"^K",false,"~:methods",[["^ ","^L",1,"^K",false,"~:tag",["^4",[null,"~$js/RegExp","~$clj","~$any","~$cljs.core/Keyword","~$cljs.core/ISet","~$cljs.tools.reader.impl.utils/ReaderConditional","~$cljs.core/List","~$not-native","~$cljs.core/MetaFn","~$clj-nil"]]],["^ ","^L",2,"^K",false,"^S",["^4",[null,"^T","^U","^V","^W","^X","^Y","^Z","^[","^10","^11"]]]],"^A",5,"^C",5,"^M",2,"~:fn-var",true,"^E",["^F",[["~$s"],["~$s","^H"]]],"^I","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  "],"~$parse-string-all",["^ ","^>",null,"^?",["^ ","^@","/Users/sansarip/Dev/nw-calculator/resources/public/js/compiled/dev/edamame/core.cljc","^A",59,"^B",7,"^C",59,"^D",23,"^E",["^F",["^G",["^F",[["~$s"],["~$s","^H"]]]]],"^I","Like parse-string but parses all values from string and returns them\n  in a vector.","^J",["^ ","^K",false,"^L",2,"^M",2,"^N",[["~$s"],["~$s","^H"]],"^E",["^F",[["~$s"],["~$s","^H"]]],"^O",["^F",[null,null]]]],"^5","~$edamame.core/parse-string-all","^@","resources/public/js/compiled/dev/edamame/core.cljc","^D",23,"^J",["^ ","^K",false,"^L",2,"^M",2,"^N",[["~$s"],["~$s","^H"]],"^E",["^F",[["~$s"],["~$s","^H"]]],"^O",["^F",[null,null]]],"^N",[["~$s"],["~$s","^H"]],"^Q",null,"^L",2,"^O",["^F",[null,null]],"^B",1,"^K",false,"^R",[["^ ","^L",1,"^K",false,"^S","^U"],["^ ","^L",2,"^K",false,"^S","^U"]],"^A",59,"^C",59,"^M",2,"^12",true,"^E",["^F",[["~$s"],["~$s","^H"]]],"^I","Like parse-string but parses all values from string and returns them\n  in a vector."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^I",null]